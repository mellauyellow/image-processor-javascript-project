{"version":3,"sources":["webpack:///webpack/bootstrap 9f2d74612c611c82403c","webpack:///./lib/tableau.js","webpack:///./lib/image.js","webpack:///./lib/filter.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;AAEA;;AAEA;AACA;AACA,EAAC;;;;;;;ACND;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,qCAAoC,sEAAsE;AAC1G;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;;;;;;;;ACzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,4DAA2D,UAAU;AACrE;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,oBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,oBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,oBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9f2d74612c611c82403c","const Image = require('./image');\n\nlet selectedImage;\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  selectedImage = new Image();\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/tableau.js\n// module id = 0\n// module chunks = 0","const Filter = require('./filter');\n\nclass Image {\n  constructor() {\n    this.createDropbox();\n    this.img = null;\n    this.width = null;\n    this.height = null;\n    this.currentImg = null;\n    this.createCanvasEl = this.createCanvasEl.bind(this);\n    this.addWindowResize = this.addWindowResize.bind(this);\n    this.handleFile = this.handleFile.bind(this);\n  }\n\n  createDropbox() {\n    let dropbox = document.getElementById('dropbox');\n\n    dropbox.addEventListener(\"dragenter\", this.dragenter, false);\n    dropbox.addEventListener(\"dragover\", this.dragover, false);\n    dropbox.addEventListener(\"drop\", this.drop(), false);\n  }\n\n  dragenter(e) {\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  dragover(e) {\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  drop() {\n    return (e) => {\n      e.stopPropagation();\n      e.preventDefault();\n\n      let dt = e.dataTransfer;\n      let files = dt.files;\n\n      this.handleFile(files[0]);\n    };\n  }\n\n  handleFile(file) {\n    this.img = document.createElement(\"img\");\n    this.img.file = file;\n\n    let reader = new FileReader();\n\n    reader.onload = (e) => {\n      this.img.src = e.target.result;\n      this.width = this.img.width;\n      this.height = this.img.height;\n\n      this.createCanvasEl(this.img);\n      new Filter(document.getElementById('image-canvas'), this);\n      this.addWindowResize();\n    };\n\n    reader.readAsDataURL(file);\n  }\n\n  createCanvasEl() {\n    let $canvasDiv = $('.dynamic-canvas');\n\n    let imgDimensions = this.imageResize(0.8);\n\n    let $ctx = $('<canvas/>').attr({width: imgDimensions[0], height: imgDimensions[1], id: 'image-canvas'});\n    let c = $ctx[0].getContext('2d');\n    c.drawImage(this.img, 0, 0, ...imgDimensions);\n    let $dropbox = $('.dropbox-and-preview');\n    $dropbox.remove();\n    $canvasDiv.append($ctx);\n  }\n\n  imageResize(percentage) {\n    let wWidth = window.innerWidth;\n    let wHeight = window.innerHeight;\n    let maxHeight = wHeight * percentage;\n    let maxWidth = wWidth * percentage;\n    let maxImgWidth = maxWidth;\n    let maxImgHeight = maxImgWidth * (this.height / this.width);\n\n    if (maxImgHeight > maxHeight) {\n      maxImgHeight = maxHeight;\n      maxImgWidth = maxImgHeight * (this.width / this.height);\n    }\n\n    if (maxImgWidth > this.width || maxImgHeight > this.height) {\n      return [this.width, this.height];\n    }\n\n    return [maxImgWidth, maxImgHeight];\n  }\n\n  addWindowResize() {\n    $(window).resize(() => {\n      let $canvasDiv = $('#image-canvas');\n      $canvasDiv.remove();\n      this.createCanvasEl();\n    });\n  }\n}\n\nmodule.exports = Image;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/image.js\n// module id = 1\n// module chunks = 0","class Filter {\n  constructor(currentCanvas, imgObject) {\n    this.currentCanvas = currentCanvas;\n    this.currentCtx = this.currentCanvas.getContext('2d');\n    this.cache = [this.currentCtx.getImageData(0, 0, this.currentCanvas.width, this.currentCanvas.height)];\n    this.filterOrder = [];\n    this.currentIndex = 0;\n    this.imgObject = imgObject;\n    this.fullImgCanvas = this.buildFullImgCanvas();\n    this.buildFilterElements();\n    this.buildUtilityElements();\n    this.greyFilter = this.greyFilter.bind(this);\n    this.greenFilter = this.greenFilter.bind(this);\n    this.resetCanvas = this.resetCanvas.bind(this);\n    this.applyFilter = this.applyFilter.bind(this);\n    this.downloadImage = this.downloadImage.bind(this);\n    this.sharpenFilter = this.sharpenFilter.bind(this);\n    this.calculateMatrix = this.calculateMatrix.bind(this);\n  }\n\n  buildFullImgCanvas() {\n    let canvas = document.createElement('canvas');\n    canvas.width = this.imgObject.width;\n    canvas.height = this.imgObject.height;\n\n    let ctx = canvas.getContext('2d');\n\n    ctx.drawImage(this.imgObject.img, 0, 0, this.imgObject.width, this.imgObject.height);\n    return canvas;\n  }\n\n  buildFilterElements() {\n    let $filterDiv = $('.filters');\n    let $greyButton = $('<button/>').html(\"grey filter\");\n    let $sharpenButton = $('<button/>').html(\"sharpen filter\");\n\n    $greyButton.click(this.applyFilter(this.greyFilter));\n    $sharpenButton.click(this.applyFilter(this.sharpenFilter));\n\n    $filterDiv.append($greyButton);\n    $filterDiv.append($sharpenButton);\n  }\n\n  buildUtilityElements() {\n    let $utilityDiv = $('.utilities');\n    let $testButton = $('<a/>').html(\"utility test\").attr({href: \"#\"});\n    let that = this;\n\n    $testButton.click(\n      function() {\n        that.downloadImage(this, 'canvas.jpg');\n        that.fullImgCanvas = that.buildFullImgCanvas();\n      }\n    );\n\n    $utilityDiv.append($testButton);\n  }\n\n  downloadImage(link, filename) {\n    let canvas = this.fullImgCanvas;\n\n    this.filterOrder.forEach(filter => filter(canvas));\n\n    link.href = canvas.toDataURL();\n    link.download = filename;\n  }\n\n  applyFilter(filter) {\n    return (e) => {\n      e.preventDefault();\n      this.resetCanvas();\n      filter(this.currentCanvas, this);\n      this.filterOrder.push(filter);\n    };\n  }\n\n  greyFilter(canvas) {\n    let ctx = canvas.getContext('2d');\n\n    let ImageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    let data = ImageData.data;\n\n    for (var i = 0; i < data.length; i += 4) {\n      let newValue = 0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2];\n      data[i] = newValue;\n      data[i + 1] = newValue;\n      data[i + 2] = newValue;\n    }\n    // this.cache.push(ImageData);\n    // this.currentIndex++;\n    ctx.putImageData(ImageData, 0, 0);\n  }\n\n  greenFilter(canvas) {\n    let ctx = canvas.getContext('2d');\n\n    let ImageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    let data = ImageData.data;\n\n    for (var i = 0; i < data.length; i += 4) {\n      data[i] = 0;\n      data[i + 1] = 255;\n      data[i + 2] = 0;\n    }\n    // this.cache.push(ImageData);\n    // this.currentIndex++;\n    ctx.putImageData(ImageData, 0, 0);\n  }\n\n  sharpenFilter(canvas, scope) {\n    console.log(scope, \"sharpenfilter\");\n    let filterMatrix = [0, -1, 0, -1, 5, -1, 0, -1, 0];\n    let ctx = canvas.getContext('2d');\n\n    let ImageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    let data = ImageData.data;\n\n    for (var i = 0; i < data.length; i++) {\n      let pixelMatrix = scope.calculateMatrix(i, data, canvas.width);\n      data[i] = scope.filteredPixelValue(pixelMatrix, filterMatrix);\n    }\n    // this.cache.push(ImageData);\n    // this.currentIndex++;\n    ctx.putImageData(ImageData, 0, 0);\n  }\n\n  calculateMatrix(idx, data, width) {\n    let matrix = [];\n\n    if (idx - width * 4 < 0) {\n      matrix.push(data[idx - 4], data[idx], data[idx + 4]);\n    } else {\n      let offset = idx - (width * 4);\n      matrix.push(data[offset - 4], data[offset], data[offset + 4]);\n    }\n\n    matrix.push(data[idx - 4], data[idx], data[idx + 4]);\n\n    if (idx + width * 4 > data.length) {\n      matrix.push(data[idx - 4], data[idx], data[idx + 4]);\n    } else {\n      let offset = idx + (width * 4);\n      matrix.push(data[offset - 4], data[offset], data[offset + 4]);\n    }\n\n    return matrix;\n  }\n\n  filteredPixelValue(pixelMatrix, filterMatrix) {\n    let sum = 0;\n    pixelMatrix.forEach((pVal, idx) => (sum += pVal * filterMatrix[idx]));\n\n    return sum;\n  }\n\n  resetCanvas() {\n    this.currentCanvas = document.getElementById('image-canvas');\n    this.currentCtx = this.currentCanvas.getContext('2d');\n  }\n}\n\nmodule.exports = Filter;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/filter.js\n// module id = 3\n// module chunks = 0"],"sourceRoot":""}